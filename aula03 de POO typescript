
class Cachorro {
  nome: string = ""
  peso: number = 0
  cor: string = ""
 
  private energia: number = 100

  constructor (nome: string, cor: string){
 
   this.nome = nome
   this.cor = cor
  
 }
    emitirSom(): void {
      if (this.energia >= 30){
      console.log("au-au")
      this.energia -= 20
      }

    }

     ouvirSom(som: string): void{

      if (som == this.nome){
       this.emitirSom()
      }
   }
      comer(comida : Comida){
      this.energia += comida.energia
       if (this.energia > 100){
        this.energia = 100

       }
   
     }
}
      class Comida{
       nome: string = ""
       energia: number = 0

    constructor (nome: string, energia: number){
      this.nome = nome
      this.energia = energia
    }
    
   }
 
const cachorro: Cachorro = new Cachorro("sadan", "caramelo")

 for (let contador = 1; contador <= 10; contador ++){
  console.log(contador)
  cachorro.emitirSom()
 }
  cachorro.comer(new Comida("Osso", 50))

  for (let contador = 11; contador <= 20; contador++){
    console.log(contador)
    cachorro.emitirSom()
  }
cachorro.ouvirSom("sadan")


// outro modelo de exercicio, implementando (interface)

interface Carro{
  partes: Array<string>
  montar(): void
}
 class CarroModeloA implements Carro{
  partes: Array<string> = ["motor1.0,cambio_manual"]


  montar(): void{
  console.log(this.partes.join("."))

 }
 }
  //const carroA: CarroModeloA = new CarroModeloA()
  //carroA.montar()

  //const carroX: Carro = new CarroModeloA()
  //carroX.montar()

  class CarroModeloB implements Carro{
  partes: Array<string> = ["motor2.0,cambio_automatico"]

  montar(): void {
  console.log(this.partes.join(";"))
 }

 }
   const carroA: CarroModeloA = new CarroModeloA()
   const carroB: CarroModeloB = new CarroModeloB()

   function montarCarros(carros: Array<Carro>){

  carros.forEach((carro)=> carro.montar())
}
  montarCarros([carroA, carroB])


